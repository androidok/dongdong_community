package com.dongdong.app.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dongdong.app.bean.OpenDoorRecordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OPEN_DOOR_RECORD_BEAN".
*/
public class OpenDoorRecordBeanDao extends AbstractDao<OpenDoorRecordBean, Long> {

    public static final String TABLENAME = "OPEN_DOOR_RECORD_BEAN";

    /**
     * Properties of entity OpenDoorRecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property RoomId = new Property(2, String.class, "roomId", false, "ROOM_ID");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
        public final static Property ComNumber = new Property(4, String.class, "comNumber", false, "COM_NUMBER");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Timestamp = new Property(6, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property DeviceName = new Property(7, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property RoomNumber = new Property(8, String.class, "roomNumber", false, "ROOM_NUMBER");
        public final static Property MemberName = new Property(9, String.class, "memberName", false, "MEMBER_NAME");
        public final static Property MobilePhone = new Property(10, String.class, "mobilePhone", false, "MOBILE_PHONE");
        public final static Property IdNumber = new Property(11, String.class, "idNumber", false, "ID_NUMBER");
    }


    public OpenDoorRecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public OpenDoorRecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OPEN_DOOR_RECORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_ID\" TEXT," + // 1: deviceId
                "\"ROOM_ID\" TEXT," + // 2: roomId
                "\"USER_ID\" TEXT," + // 3: userId
                "\"COM_NUMBER\" TEXT," + // 4: comNumber
                "\"TYPE\" TEXT," + // 5: type
                "\"TIMESTAMP\" TEXT," + // 6: timestamp
                "\"DEVICE_NAME\" TEXT," + // 7: deviceName
                "\"ROOM_NUMBER\" TEXT," + // 8: roomNumber
                "\"MEMBER_NAME\" TEXT," + // 9: memberName
                "\"MOBILE_PHONE\" TEXT," + // 10: mobilePhone
                "\"ID_NUMBER\" TEXT);"); // 11: idNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPEN_DOOR_RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OpenDoorRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(3, roomId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String comNumber = entity.getComNumber();
        if (comNumber != null) {
            stmt.bindString(5, comNumber);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(7, timestamp);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(8, deviceName);
        }
 
        String roomNumber = entity.getRoomNumber();
        if (roomNumber != null) {
            stmt.bindString(9, roomNumber);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(10, memberName);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(11, mobilePhone);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(12, idNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OpenDoorRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(3, roomId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String comNumber = entity.getComNumber();
        if (comNumber != null) {
            stmt.bindString(5, comNumber);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(7, timestamp);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(8, deviceName);
        }
 
        String roomNumber = entity.getRoomNumber();
        if (roomNumber != null) {
            stmt.bindString(9, roomNumber);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(10, memberName);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(11, mobilePhone);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(12, idNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OpenDoorRecordBean readEntity(Cursor cursor, int offset) {
        OpenDoorRecordBean entity = new OpenDoorRecordBean();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OpenDoorRecordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoomId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setComNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimestamp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeviceName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRoomNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMemberName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMobilePhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIdNumber(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OpenDoorRecordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OpenDoorRecordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OpenDoorRecordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
